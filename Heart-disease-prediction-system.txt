import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
raw_data = pd.read_csv(r'C:\Users\Rakshitha\Downloads\mbr.csv')
data = raw_data.where((pd.notnull(raw_data)),'')
print(data.head())
print(data.shape)
y = data['HeartDiseaseorAttack']
x = data.drop(['HeartDiseaseorAttack'], axis = 1)
print (x)
print(y)
x_train , x_test , y_train , y_test = train_test_split(x,y,test_size=0.1,stratify=y,random_state=0)
print(x.shape)
print(x_train.shape)
print(x_test.shape)
print(y.shape)
print(y_train.shape)
print(y_test.shape)
from sklearn.ensemble import RandomForestClassifier
randomforest_classifier= RandomForestClassifier(n_estimators=10)
randomforest_classifier.fit(x_train,y_train)
prediction_on_training_data = randomforest_classifier.predict(x_train)
accuracy_on_training_data = accuracy_score(y_train ,prediction_on_training_data)
print("Accuracy",accuracy_on_training_data)
prediction_on_testing_data =randomforest_classifier.predict(x_test)
accuracy_on_testing_data = accuracy_score(y_test ,prediction_on_testing_data)
print("Accuracy",accuracy_on_testing_data)
print("values")
HighBP = int(input("highbp="))
HighChol = int(input("cholestrol="))
CholCheck = int(input("cholcheck="))
BMI = int(input("bmi="))
Smoker = int(input("smoker 1 for yes 0 for no="))
Stroke = int(input("stroke 1 for yes 0 for no="))
Diabetes= int(input("Diabetes 1 for yes 0 for no="))
PhysActivity= int(input("activity 1 for yes 0 for no="))
HvyAlcoholConsump= int(input("alcoholic 1 for yes 0 for no="))
AnyHealthcare= int(input("healthcare 1 for yes 0 for no="))
GenHlth= int(input("genhealth ="))
MentHlth= int(input("mentalhealth ="))
PhysHlth= int(input("physhlth="))
Sex= int(input("sex 0 for male 1 for female="))
Age= int(input("age="))
input=(HighBP,HighChol,CholCheck,BMI,Smoker,Stroke,Diabetes,PhysActivity,HvyAlcoholConsump,AnyHealthcare,GenHlth,MentHlth,PhysHlth,Sex,Age)
input_data = np.asarray(input)
input_reshape = input_data.reshape(1,-1)
prediction = randomforest_classifier.predict(input_reshape)
print(prediction)
if (prediction[0]==1):
    print("you probably may have heart disease")
else:
    print("you have no heart disease")